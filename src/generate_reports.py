import datetime
import glob
import os

from collections import Counter

import xmltodict

from utils.general import dump_to_markdown
from utils.xml_processing import get_long_df, get_location, get_date


DATE = '16_03_2022_cov'

MASK_IDS = True

XML_FAMILIES = [
    ("raw_data/28-11-2022/*/Data/input/*/*.xml", "reports/horizon_report.md"),  # Horizon
    ("raw_data/16-03-2022/*/Data/input/*/*.xml", "reports/sanolla_report.md"),  # Sanolla
]


HEADING = (
    '# Report\n\n'
    f'Generated on: {datetime.datetime.now().strftime("%d-%m-%Y")}\n\n'
    'Generated by: Mikolaj Pabiszczak [Medsensio AS]\n\n'
)


EXPLANATION_SUMMARY = (
    'In the table above the:\n\n'
    ' - `# audio files` gives the number of files in "date" directories (not necessarily audio files);\n'
    ' - `# encounters` gives the number of encounters understood as a number of nonempty "date" directories;\n'
    ' - `# XML files` gives the number of existing XML files;\n'
    ' - `# unique patients` gives the number of unique `PatientIdentifier`+`Location` entries in the XML files with patient data;\n'
    '\n'
)


EXPLANATION_DISEASE = (
    "The numbers in the table above were extracted automatically from the XML files. "
    "Only the standardised-input entries were counted.\n\n"
)


def main():
    for xml_path_format, report_path in XML_FAMILIES:

        encounters_path_format = xml_path_format.replace(".xml", "/")
        encounters = glob.glob(encounters_path_format)
        n_encounter_audio = [len(glob.glob(dir+"/*ch1.wav")) for dir in encounters]
        n_encounters = len([1 for n_audio in n_encounter_audio if n_audio != 0])  # TODO: upgrade
        serial_numbers = set()

        xml_paths = glob.glob(xml_path_format)

        diseased_numbers = {
            "copd": [],
            "asthma": [],
            "emphysema": [],
            "chronic_bronchitis": [],
            "lung_cancer": [],
            "hypertension": [],
            "angina_pectoris": [],
            "myocardial_infarction": [],
            "heart_failure": [],
        }


        for xml_path in xml_paths:
            # Read the xml file
            with open(xml_path, "r", encoding="utf-8") as xml_f:
                xml_content = xmltodict.parse(xml_f.read())
                xml_content = xml_content["Bat-Call_PatientData"]

                # Get the long format of the data
                long_data_row = get_long_df(xml_content)
                # Add the location (care facility) and the date to the dictionary
                long_data_row['Location'] = get_location(xml_path)
                long_data_row['RecordDate'] = get_date(xml_path)
                # Add a unique identifier for each patient
                try:
                    patient_id = long_data_row["PatientIdentifier"] + '_' + long_data_row['Location']
                except KeyError:
                    patient_id = long_data_row["SerialNumber"] + '_' + long_data_row['Location']

                serial_numbers.add(patient_id)

                # Get diseases that were recorded in the standardised way
                asthma_entry = long_data_row.get("Asthma")
                if asthma_entry is not None:
                    assert asthma_entry
                    diseased_numbers["asthma"].append(patient_id)

                copd_entry = long_data_row.get("COPD")
                if copd_entry is not None:
                    assert copd_entry
                    diseased_numbers["copd"].append(patient_id)

                emphysema_entry = long_data_row.get("Emphysema")
                if emphysema_entry is not None:
                    assert emphysema_entry
                    diseased_numbers["emphysema"].append(patient_id)

                chronic_bronchitis_entry = long_data_row.get("ChronicBronchitis")
                if chronic_bronchitis_entry is not None:
                    assert chronic_bronchitis_entry
                    diseased_numbers["chronic_bronchitis"].append(patient_id)

                lung_cancer_entry = long_data_row.get("LungCancer")
                if lung_cancer_entry is not None:
                    assert lung_cancer_entry
                    diseased_numbers["lung_cancer"].append(patient_id)

                hypertension_entry = long_data_row.get("Hypertension")
                if hypertension_entry is not None:
                    assert hypertension_entry
                    diseased_numbers["hypertension"].append(patient_id)

                angina_pectoris_entry = long_data_row.get("AnginaPectoris")
                if angina_pectoris_entry is not None:
                    assert angina_pectoris_entry
                    diseased_numbers["angina_pectoris"].append(patient_id)

                myocardial_infarction_entry = long_data_row.get("MyocardialInfarction")
                if myocardial_infarction_entry is not None:
                    assert myocardial_infarction_entry
                    diseased_numbers["myocardial_infarction"].append(patient_id)

                heart_failure_entry = long_data_row.get("HeartFailure")
                if heart_failure_entry is not None:
                    assert heart_failure_entry
                    diseased_numbers["heart_failure"].append(patient_id)



        heading = "| # audio recordings | # encounters | # XML files | # unique patients |\n"
        heading += "|:---:|:---:|:---:|:---:|\n"
        row = f"| {sum(n_encounter_audio)} | {n_encounters} | {len(xml_paths)} | {len(serial_numbers)} |\n"
        summary_table = heading + row


        heading = "| Disease | # encounters | # patients |\n"
        heading += "|:---:|:---:|:---:|\n"
        row = ""

        for k, v in diseased_numbers.items():
            cnt = Counter(v)
            row += f"| {k} | {cnt.total()} | {len(cnt)} |\n"
        disease_table = heading + row


        markdown_document = HEADING
        markdown_document += "## Summary\n\n"
        markdown_document += summary_table + "\n"
        markdown_document += EXPLANATION_SUMMARY
        markdown_document += "## Diseases summary\n\n"
        markdown_document += disease_table + "\n"
        markdown_document += EXPLANATION_DISEASE

        os.makedirs(os.path.dirname(report_path), exist_ok=True)
        dump_to_markdown(report_path, markdown_document)


if __name__ == '__main__':
    main()
